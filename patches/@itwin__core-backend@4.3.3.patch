diff --git a/lib/cjs/ChangesetECAdaptor.js b/lib/cjs/ChangesetECAdaptor.js
index 2057c566add84b5698a5035986691f4f30a598e0..1cc6a1d90b8d722225eaf14fbf12ca3464c703e9 100644
--- a/lib/cjs/ChangesetECAdaptor.js
+++ b/lib/cjs/ChangesetECAdaptor.js
@@ -326,6 +326,43 @@ class PartialECChangeUnifier {
         this._cache = new Map();
         this._readonly = false;
     }
+    /**
+     * Get root class id for a given class
+     * @param classId given class id
+     * @param db use to find root class
+     * @returns return root class id
+     */
+    static getRootClassId(classId, db) {
+        const sql = `
+      WITH
+      [base_class]([classId], [baseClassId], [Level]) AS(
+        SELECT [ch].[ClassId], [ch].[BaseClassId], 0
+        FROM   [ec_ClassHasBaseClasses] [ch] WHERE  [ch].[ClassId] = ?
+        UNION ALL
+        SELECT [ch].[ClassId], [ch].[BaseClassId], [Level] + 1
+        FROM   [ec_ClassHasBaseClasses] [ch], [base_class] [bc] WHERE  [bc].[BaseClassId] = [ch].[ClassId]
+
+      )
+      SELECT FORMAT('0x%x', [bc].[BaseClassId]) rootClass
+      FROM   [base_class] [bc]
+      WHERE  [bc].[ClassId] <> [bc].[BaseClassId]
+              AND [bc].[BaseClassId] NOT IN (SELECT [ca].[ContainerId]
+            FROM   [ec_CustomAttribute] [ca]
+            WHERE  [ca].[ContainerType] = 30
+                      AND [ca].[ClassId] IN (SELECT [cc].[Id]
+                    FROM   [ec_Class] [cc]
+                          JOIN [ec_Schema] [ss] ON [ss].[Id] = [cc].[SchemaId]
+                    WHERE  [cc].[Name] = 'IsMixIn'
+                            AND [ss].[Name] = 'CoreCustomAttributes'))
+      ORDER BY [Level] DESC`;
+        return db.withSqliteStatement(sql, (stmt) => {
+            stmt.bindId(1, classId);
+            if (stmt.step() === core_bentley_1.DbResult.BE_SQLITE_ROW && !stmt.isValueNull(0)) {
+                return stmt.getValueString(0);
+            }
+            return classId;
+        });
+    }
     /**
      * Combine partial instance with instance with same key if already exists.
      * @param rhs partial instance
@@ -334,7 +371,7 @@ class PartialECChangeUnifier {
         if (!rhs.$meta) {
             throw new Error("PartialECChange being combine must have '$meta' property");
         }
-        const key = PartialECChangeUnifier.buildKey(rhs);
+        const key = PartialECChangeUnifier.buildKey(rhs, db);
         const lhs = this._cache.get(key);
         if (lhs) {
             const { $meta: _, ...restOfRhs } = rhs;
@@ -368,8 +405,17 @@ class PartialECChangeUnifier {
      * @param change EC change
      * @returns key created from EC change.
      */
-    static buildKey(change) {
-        return `${change.ECClassId}-${change.ECInstanceId}-${change.$meta?.stage}`.toLowerCase();
+    static buildKey(change, db) {
+        let classId = change.ECClassId;
+        if (typeof classId === "undefined") {
+            if (db && change.$meta?.fallbackClassId) {
+                classId = this.getRootClassId(change.$meta.fallbackClassId, db);
+            }
+            if (typeof classId === "undefined") {
+                throw new Error(`unable to resolve ECClassId to root class id.`);
+            }
+        }
+        return `${change.ECInstanceId}-${classId}-${change.$meta?.stage}`.toLowerCase();
     }
     /**
      * Append partial changes which will be combine using there instance key.
@@ -606,7 +652,7 @@ class ChangesetECAdaptor {
                     throw new Error(`unable to get change from changeset reader`);
                 }
                 let ecClassId = this.reader.op === "Inserted" ? change.inserted?.ECClassId : change.deleted?.ECClassId;
-                const classIdPresentInChange = !ecClassId;
+                const classIdPresentInChange = typeof ecClassId !== "undefined";
                 let classMap;
                 let fallbackClassId;
                 if (table.isClassIdVirtual) {
@@ -631,7 +677,7 @@ class ChangesetECAdaptor {
                 }
                 if (!classMap)
                     throw new Error(`unable to load class map`);
-                if (!classIdPresentInChange && !ecClassId)
+                if (!classIdPresentInChange && !ecClassId && !fallbackClassId)
                     ecClassId = classMap.id;
                 if (this._allowedClasses.size !== 0) {
                     if (!this._allowedClasses.has(classMap.id))
